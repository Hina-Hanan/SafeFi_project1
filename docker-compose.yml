networks:
  safefi-network:
    driver: bridge

services:
  # PostgreSQL Database
  db:
    image: postgres:15
    container_name: safefi-db
    restart: unless-stopped
    environment:
      POSTGRES_USER: ${POSTGRES_USER:-defi_user}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-usersafety}
      POSTGRES_DB: ${POSTGRES_DB:-defi_risk_assessment}
    ports:
      - "${POSTGRES_PORT:-5432}:5432"
    volumes:
      - pgdata:/var/lib/postgresql/data
    networks:
      - safefi-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -h localhost -p 5432 -U ${POSTGRES_USER:-defi_user} -d postgres"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Backend API
  api:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: safefi-api
    restart: unless-stopped
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-defi_risk_assessment}
      DATABASE_URL: postgresql+psycopg2://${POSTGRES_USER:-defi_user}:${POSTGRES_PASSWORD:-usersafety}@db:5432/${POSTGRES_DB:-defi_risk_assessment}
      ENVIRONMENT: ${ENVIRONMENT:-production}
      LOG_LEVEL: ${LOG_LEVEL:-INFO}
      # CORS: Configure for your frontend domain (GCS bucket URL or custom domain)
      CORS_ORIGINS: ${CORS_ORIGINS:-http://localhost:5173,https://safefi.live}
      SEED_PROTOCOLS: ${SEED_PROTOCOLS:-true}
      # LLM Configuration (only used if LLM dependencies are installed)
      OLLAMA_BASE_URL: ${OLLAMA_BASE_URL:-http://host.docker.internal:11434}
      OLLAMA_MODEL: ${OLLAMA_MODEL:-tinyllama}
      RAG_ENABLED: ${RAG_ENABLED:-false}
      # Email Configuration
      EMAIL_ALERTS_ENABLED: ${EMAIL_ALERTS_ENABLED:-false}
      SMTP_HOST: ${SMTP_HOST:-smtp.gmail.com}
      SMTP_PORT: ${SMTP_PORT:-587}
      SMTP_USER: ${SMTP_USER}
      SMTP_PASSWORD: ${SMTP_PASSWORD}
      EMAIL_FROM: ${EMAIL_FROM:-safefi@example.com}
      EMAIL_FROM_NAME: ${EMAIL_FROM_NAME:-SafeFi Alert System}
    depends_on:
      db:
        condition: service_healthy
    ports:
      - "${API_PORT:-8000}:8000"
    volumes:
      - ./backend/models:/app/models
      - ./backend/data:/app/data
      - ./backend/logs:/app/logs
    networks:
      - safefi-network
    healthcheck:
      # Use Python-based healthcheck (curl may not be available in slim image)
      test: ["CMD", "python", "-c", "import urllib.request; urllib.request.urlopen('http://localhost:8000/health')"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

volumes:
  pgdata:
    driver: local



