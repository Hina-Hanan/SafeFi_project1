version: "3.9"

networks:
  safefi-network:
    driver: bridge

services:
  # PostgreSQL Database
  db:
    image: postgres:15
    container_name: safefi-db
    restart: always
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    volumes:
      - pgdata:/var/lib/postgresql/data
    networks:
      - safefi-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER}"]
      interval: 10s
      timeout: 5s
      retries: 5

  # MLflow for Model Tracking
  mlflow:
    image: ghcr.io/mlflow/mlflow:v2.16.2
    container_name: safefi-mlflow
    restart: always
    command: mlflow server --host 0.0.0.0 --port 5000 --backend-store-uri /mlflow --default-artifact-root /mlflow
    volumes:
      - mlruns:/mlflow
    networks:
      - safefi-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5000/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Backend API
  api:
    image: ${REGISTRY}/backend:${TAG:-latest}
    container_name: safefi-api
    restart: always
    environment:
      DATABASE_URL: postgresql+psycopg2://${POSTGRES_USER}:${POSTGRES_PASSWORD}@db:5432/${POSTGRES_DB}
      MLFLOW_TRACKING_URI: http://mlflow:5000
      ENVIRONMENT: production
      LOG_LEVEL: ${LOG_LEVEL}
      CORS_ORIGINS: ${CORS_ORIGINS}
      OLLAMA_BASE_URL: ${OLLAMA_BASE_URL}
      OLLAMA_MODEL: ${OLLAMA_MODEL}
      EMAIL_ALERTS_ENABLED: ${EMAIL_ALERTS_ENABLED}
      SMTP_HOST: ${SMTP_HOST}
      SMTP_PORT: ${SMTP_PORT}
      ALERT_SENDER_EMAIL: ${ALERT_SENDER_EMAIL}
      ALERT_SENDER_PASSWORD: ${ALERT_SENDER_PASSWORD}
    depends_on:
      db:
        condition: service_healthy
      mlflow:
        condition: service_healthy
    ports:
      - "8000:8000"
    volumes:
      - ./backend/models:/app/models
      - ./backend/data:/app/data
      - ./backend/logs:/app/logs
    networks:
      - safefi-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Frontend
  frontend:
    image: ${REGISTRY}/frontend:${TAG:-latest}
    container_name: safefi-frontend
    restart: always
    ports:
      - "80:80"
    depends_on:
      - api
    networks:
      - safefi-network
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost/health"]
      interval: 30s
      timeout: 3s
      retries: 3
      start_period: 10s

volumes:
  pgdata:
  mlruns:

networks:
  safefi-network:
    external: false
