name: CD Pipeline - Deploy to Production

on:
  push:
    branches: [ main ]
    tags:
      - 'v*'
  workflow_dispatch:

env:
  REGISTRY: ghcr.io
  PYTHON_VERSION: '3.11'
  NODE_VERSION: '20'

jobs:
  build-and-push:
    name: Build and Push Docker Images
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    
    strategy:
      matrix:
        service: [backend, frontend]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Set up Python (for backend)
        if: matrix.service == 'backend'
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
      
      - name: Set up Node.js (for frontend)
        if: matrix.service == 'frontend'
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
      
      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ github.repository }}/${{ matrix.service }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=sha
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      
      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: ./${{ matrix.service }}
          file: ./${{ matrix.service }}/Dockerfile
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: |
            BUILD_DATE=${{ github.event.head_commit.timestamp }}
            VCS_REF=${{ github.sha }}
            VERSION=${{ github.ref }}
  
  deploy-production:
    name: Deploy to Production Server
    runs-on: ubuntu-latest
    needs: build-and-push
    if: github.ref == 'refs/heads/main'
    environment:
      name: production
      url: https://safefi.live
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Deploy to production via SSH
        uses: appleboy/ssh-action@v1
        with:
          host: ${{ secrets.PROD_HOST }}
          username: ${{ secrets.PROD_USER }}
          key: ${{ secrets.PROD_SSH_KEY }}
          port: ${{ secrets.PROD_PORT || 22 }}
          script: |
            # Navigate to project directory
            cd /opt/safefi || exit 1
            
            # Pull latest code
            git fetch origin
            git checkout main
            git pull origin main
            
            # Login to GitHub Container Registry
            echo ${{ secrets.GITHUB_TOKEN }} | docker login ghcr.io -u ${{ secrets.GITHUB_ACTOR }} --password-stdin
            
            # Pull latest images
            docker pull ${{ env.REGISTRY }}/${{ github.repository }}/backend:main
            docker pull ${{ env.REGISTRY }}/${{ github.repository }}/frontend:main
            
            # Stop existing containers
            docker-compose down
            
            # Start with new images
            docker-compose up -d --no-deps backend frontend
            
            # Run database migrations
            docker-compose exec -T backend python -m alembic upgrade head || true
            
            # Health check
            sleep 10
            curl -f http://localhost:8000/health || exit 1
            curl -f http://localhost:80/ || exit 1
            
            echo "âœ… Deployment successful"
      
      - name: Notify deployment status
        if: always()
        uses: 8398a7/action-slack@v3
        with:
          status: ${{ job.status }}
          text: |
            Deployment to production ${{ job.status }}
            Commit: ${{ github.sha }}
            Author: ${{ github.actor }}
          webhook_url: ${{ secrets.SLACK_WEBHOOK }}
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK }}
  
  post-deploy-tests:
    name: Post-Deployment Tests
    runs-on: ubuntu-latest
    needs: deploy-production
    if: github.ref == 'refs/heads/main'
    
    steps:
      - name: Wait for services to be ready
        run: sleep 30
      
      - name: Test backend health endpoint
        run: |
          curl -f https://api.safefi.app/health || exit 1
      
      - name: Test frontend availability
        run: |
          curl -f https://safefi.app/ || exit 1
      
      - name: Test API endpoints
        run: |
          # Test main API endpoint
          response=$(curl -s https://api.safefi.app/api/v1/protocols?limit=1)
          echo "$response" | jq '.'
          
          # Verify response structure
          echo "$response" | jq -e '.data' > /dev/null || exit 1
